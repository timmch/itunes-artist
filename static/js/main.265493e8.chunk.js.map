{"version":3,"sources":["App.js","serviceWorker.js","index.js"],"names":["Album","props","state","releaseYear","Date","releaseDate","getFullYear","albumArtWork","artWork","replace","className","href","this","linkToiTunes","target","src","alt","collectionExplicitness","title","album","artistName","primaryGenreName","React","Component","AlbumList","view","listSelected","bind","gridSelected","setState","albums","onClick","map","collectionName","artworkUrl100","collectionViewUrl","key","collectionId","Artist","artist","axios","url","artistId","adapter","jsonpAdapter","then","res","data","results","shift","sort","a","b","getTime","reverse","artistLinkUrl","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.265493e8.chunk.js","sourcesContent":["import React from 'react';\nimport axios from 'axios';\nimport jsonpAdapter from 'axios-jsonp';\nimport './App.css';\n\nclass Album extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n        releaseYear: new Date(props.releaseDate).getFullYear(),\n        // iTunes returns urls for 100x100 and 60x60 pixel sizes AND there is an unlisted 600x600 image available as well\n        albumArtWork: props.artWork.replace(\"100x100\", \"600x600\"),\n    };\n  }\n\n  render() {\n    return(\n      <li className=\"album\">\n        <a href={this.props.linkToiTunes} target=\"_blank\" className=\"cell album-cover\">\n          <img src={this.state.albumArtWork} alt=\"album-cover\" />\n        </a>\n        <a href={this.props.linkToiTunes} target=\"_blank\" className=\"cell\">\n          <h4 className=\"cell\">\n            <span className={this.props.collectionExplicitness}>\n              {this.props.title}\n            </span>\n          </h4>\n        </a>\n        <div className=\"cell tableOnly\">\n          {this.props.album.artistName}\n        </div>\n        <h5 className=\"cell\">{this.state.releaseYear}</h5>\n        <div className=\"cell tableOnly\">\n          {this.props.album.primaryGenreName}\n        </div>\n      </li>\n    );\n  }\n}\n\nclass AlbumList extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      view: 'listSelected',\n    };\n\n    this.listSelected = this.listSelected.bind(this);\n    this.gridSelected = this.gridSelected.bind(this);\n  }\n\n  listSelected() {\n    this.setState(state => ({\n      view: 'listSelected',\n    }));\n  }\n\n  gridSelected() {\n    this.setState(state => ({\n      view: 'gridSelected',\n    }));\n  }\n\n  render() {\n    const albums = this.props.albums;\n    return(\n      <div className={this.state.view}>\n        <div className=\"albumsHeader\">\n          <h3>Albums</h3>\n          <div className=\"albumsViewToggle\">\n            <span className=\"list\" onClick={this.listSelected}>\n              LIST&nbsp;\n            </span>\n            |\n            <span className=\"grid\" onClick={this.gridSelected}>\n              &nbsp;GRID\n            </span>\n          </div>\n        </div>\n        <ul className=\"albumList\">\n          <li className=\"titleRow\">\n            <img className=\"cell album-cover\" />\n            <div className=\"cell\">\n              Title\n            </div>\n            <div className=\"cell tableOnly\">Artist</div>\n            <div className=\"cell\">\n              Release Year\n            </div>\n            <div className=\"cell tableOnly\">Genre</div>\n          </li>\n          {albums.map((album) =>\n            <Album\n              album={album}\n              title={album.collectionName}\n              releaseDate={album.releaseDate}\n              artWork={album.artworkUrl100}\n              linkToiTunes={album.collectionViewUrl}\n              key={album.collectionId}\n              collectionExplicitness={album.collectionExplicitness}\n            />\n          )}\n        </ul>\n      </div>\n\n    );\n  }\n}\n\nclass Artist extends React.Component  {\n  constructor(props) {\n    super(props);\n    this.state = {\n      albums: [],\n      artist: {},\n    }\n  }\n\n  componentDidMount() {\n    axios(\n      {\n        url: 'https://itunes.apple.com/lookup?id=' + this.props.artistId + '&entity=album',\n        adapter: jsonpAdapter,\n      })\n      .then(res => {\n        let albums = res.data.results;\n        let artist = albums.shift();\n        albums.sort((a,b) => {\n            return new Date(a.releaseDate).getTime() -\n                new Date(b.releaseDate).getTime()\n        }).reverse();\n        this.setState({\n          albums: albums,\n          artist: artist,\n        });\n      });\n  }\n\n  render() {\n    return (\n      <div>\n        <div className=\"artistCover\">\n          <h1>{this.state.artist.artistName}</h1>\n          <h4>Primary Genre: {this.state.artist.primaryGenreName}</h4>\n          <a href={this.state.artist.artistLinkUrl} target=\"_blank\">View artist on iTunes</a>\n        </div>\n        <div className=\"artistBody\">\n          <AlbumList albums={this.state.albums} />\n        </div>\n      </div>\n    );\n  }\n}\n\nclass App extends React.Component {\n  constructor(props) {\n    super(props);\n  }\n\n  render() {\n    return (\n      <div className=\"App\">\n        <Artist artistId=\"412778295\" />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}